2024-10-31 23:36:02,321 - log.py[38] - DEBUG: entry file content: ---------------------------------
2024-10-31 23:36:02,321 - log.py[39] - DEBUG: 
import glob
import os
import argparse
from cv_task.image_classification.cifar.models import resnet18
import torch
import time
from legodnn.block_detection.model_topology_extraction import topology_extraction
from legodnn.presets.common_detection_manager_1204_new import CommonDetectionManager
from legodnn.model_manager.common_model_manager import CommonModelManager
from legodnn.presets.auto_block_manager import AutoBlockManager
from offload.deployment import OptimalRuntime, BlockProfiler
from legodnn.utils.dl.common.model import get_model_size
from legodnn.utils.common.log import logger
from offload.net.server import LegodnnProfileServer, LegodnnRecvingServer, MoniterBWupServer, MoniterBWdowmServer
from apscheduler.schedulers.background import BackgroundScheduler
import multiprocessing as mp
import logging

parser = argparse.ArgumentParser()
parser.add_argument('--ip', type=str, help='ip地址', default='10.1.114.109')
parser.add_argument('--port', type=int, help='端口号', default=9999)
parser.add_argument('--path', type=str, help='保存路径', default='./results/legodnn')
parser.add_argument('--edge_device', type=str, help='使用设备', default='cpu')
parser.add_argument('--cloud_device', type=str, help='使用设备', default='cuda')
args = parser.parse_args()

logging.getLogger('apscheduler').setLevel(logging.WARNING)

def start_monitor_bwup(ip, bw):
    monitor_ser = MoniterBWupServer(ip=ip, port=6666, bw=bw)
    monitor_ser.start()
    # monitor_ser.join()
    logger.info(f"bandwidth monitor : get up bandwidth value : {bw.value:.3f} MB/s")

def scheduler_for_bandwidth_monitor_bwup(ip, interval, bw):
    # 创建调度器
    scheduler = BackgroundScheduler(timezone='MST')
    scheduler.add_job(start_monitor_bwup, 'interval', seconds=interval, args=[ip, bw])
    scheduler.start()

def start_monitor_bwdown(ip, bandwidth_value):
    monitor_cli = MoniterBWdowmServer(ip=ip, port=6667, bw=bandwidth_value)
    monitor_cli.start()
    logger.info(f"bandwidth monitor : get down bandwidth value : {bandwidth_value.value:.3f} MB/s")

def scheduler_for_bandwidth_monitor_bwdown(ip, interval, bandwidth_value):
    # 创建调度器
    scheduler = BackgroundScheduler(timezone='MST')
    # 每隔 interval 秒就创建一个带宽监视进程 用来获取最新带宽
    scheduler.add_job(start_monitor_bwdown, 'interval', seconds=interval, args=[ip,bandwidth_value])
    scheduler.start()

if __name__ == '__main__':
    cv_task = 'image_classification'
    dataset_name = 'cifar100'
    model_name = 'resnet18'
    method = 'legodnn'
    edge_device = args.edge_device
    cloud_device = args.cloud_device
    compress_layer_max_ratio = 0.125
    model_input_size = (1, 3, 32, 32)

    block_sparsity = [0.0, 0.2, 0.4, 0.6, 0.8]
    root_path = os.path.join(args.path, cv_task,
                             model_name + '_' + dataset_name + '_' + str(compress_layer_max_ratio).replace('.', '-'))

    compressed_blocks_dir_path = root_path + '/compressed'
    trained_blocks_dir_path = root_path + '/trained'
    descendant_models_dir_path = root_path + '/descendant'
    offload_dir_path = root_path + '/offload'
    block_training_max_epoch = 65
    test_sample_num = 100
    # ip = args.ip
    ip = '127.0.0.1'
    port = args.port

    bwup = mp.Value('d', 1000.)
    bwdown = mp.Value('d', 1000.)

    # checkpoint = '/data/gxy/legodnn-auto-on-cv-models/cv_task_model/image_classification/cifar100/resnet18/2024-10-14/20-15-10/resnet18.pth'
    teacher_model = resnet18(num_classes=100).to(edge_device)
    # teacher_model.load_state_dict(torch.load(checkpoint)['net'])

    # monitor_ser = MoniterBWupServer(ip=ip, port=6666, bw=bwup)
    # monitor_ser.start()
    # monitor_ser.join()
    # logger.info(f"bandwidth monitor : get up bandwidth value : {bwup.value:.3f} MB/s")
    #
    # monitor_cli = MoniterBWdowmServer(ip=ip, port=6667, bw=bwdown)
    # monitor_cli.start()
    # monitor_cli.join()
    # logger.info(f"bandwidth monitor : get down bandwidth value : {bwdown.value:.3f} MB/s")
    #
    # scheduler_for_bandwidth_monitor_bwdown(ip, 3, bwdown)
    # scheduler_for_bandwidth_monitor_bwup(ip, 3, bwup)

    print('\033[1;36m-------------------------------->    BUILD LEGODNN GRAPH\033[0m')
    model_graph = topology_extraction(teacher_model, model_input_size, device=edge_device, mode='unpack')
    model_graph.print_ordered_node()

    print('\033[1;36m-------------------------------->    START BLOCK DETECTION\033[0m')
    detection_manager = CommonDetectionManager(model_graph, max_ratio=compress_layer_max_ratio)
    detection_manager.detection_all_blocks()
    detection_manager.print_all_blocks()

    model_manager = CommonModelManager()
    block_manager = AutoBlockManager(block_sparsity, detection_manager, model_manager)

    # print('\033[1;36m-------------------------------->    TRANSMIT BLOCK PROFILES\033[0m')
    # p_client = LegodnnProfileServer(ip, 9000, block_manager, trained_blocks_dir_path)
    # p_client.start()
    # p_client.join()

    print('\033[1;36m-------------------------------->    START BLOCK PROFILING\033[0m')
    cloud_block_profiler = BlockProfiler(block_manager, model_manager, trained_blocks_dir_path, offload_dir_path,
                                        test_sample_num, model_input_size, cloud_device, 'cloud')
    cloud_block_profiler.profile_all_blocks()

    # print('\033[1;36m-------------------------------->    OBTAIN EDGE PROFILES\033[0m')
    # r_client = LegodnnRecvingServer(ip, 9001, offload_dir_path)
    # r_client.start()
    # r_client.join()

    # print('\033[1;36m-------------------------------->    START BLOCK SELECTING\033[0m')
    # optimal_runtime = OptimalRuntime(trained_blocks_dir_path, offload_dir_path, model_input_size, block_manager, model_manager, bwdown=bwdown, bwup=bwup, device=cloud_device)
    # model_size_min = get_model_size(torch.load(os.path.join(compressed_blocks_dir_path, 'model_frame.pt'))) / 1024 ** 2
    # model_size_max = get_model_size(teacher_model) / 1024 ** 2 + 1
    # optimal_runtime.update_model(0.005, (model_size_max + model_size_min) * 0.4)
    # print(optimal_runtime.get_selections_info())
2024-10-31 23:36:02,323 - log.py[40] - DEBUG: entry file content: ---------------------------------
2024-10-31 23:36:08,630 - deployment.py[124] - INFO: raw block info: {"index": 0, "id": "block-0", "latency": 0.0004068108808994292}
2024-10-31 23:36:08,791 - deployment.py[124] - INFO: raw block info: {"index": 1, "id": "block-1", "latency": 0.000729165442585945}
2024-10-31 23:36:09,092 - deployment.py[124] - INFO: raw block info: {"index": 2, "id": "block-2", "latency": 0.001062307835817337}
2024-10-31 23:36:09,372 - deployment.py[124] - INFO: raw block info: {"index": 3, "id": "block-3", "latency": 0.0008493913590908052}
2024-10-31 23:36:09,472 - deployment.py[124] - INFO: raw block info: {"index": 4, "id": "block-4", "latency": 0.0003701542386412622}
2024-10-31 23:36:09,598 - deployment.py[124] - INFO: raw block info: {"index": 5, "id": "block-5", "latency": 0.00041940704107284554}
2024-10-31 23:36:09,715 - deployment.py[124] - INFO: raw block info: {"index": 6, "id": "block-6", "latency": 0.00038081791907548893}
2024-10-31 23:36:09,866 - deployment.py[124] - INFO: raw block info: {"index": 7, "id": "block-7", "latency": 0.00044947231948375707}
2024-10-31 23:36:09,868 - pure_runtime.py[26] - INFO: load blocks with sparsity [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
2024-10-31 23:36:09,871 - pure_runtime.py[42] - DEBUG: load 0th block (block-0) (sparsity 0.0) from file
2024-10-31 23:36:09,873 - pure_runtime.py[42] - DEBUG: load 1th block (block-1) (sparsity 0.0) from file
2024-10-31 23:36:09,875 - pure_runtime.py[42] - DEBUG: load 2th block (block-2) (sparsity 0.0) from file
2024-10-31 23:36:09,877 - pure_runtime.py[42] - DEBUG: load 3th block (block-3) (sparsity 0.0) from file
2024-10-31 23:36:09,908 - pure_runtime.py[42] - DEBUG: load 4th block (block-4) (sparsity 0.0) from file
2024-10-31 23:36:09,937 - pure_runtime.py[42] - DEBUG: load 5th block (block-5) (sparsity 0.0) from file
2024-10-31 23:36:09,975 - pure_runtime.py[42] - DEBUG: load 6th block (block-6) (sparsity 0.0) from file
2024-10-31 23:36:10,005 - pure_runtime.py[42] - DEBUG: load 7th block (block-7) (sparsity 0.0) from file
2024-10-31 23:36:12,126 - deployment.py[187] - INFO: block block-0 (sparsity 0.0) latency rel drop: 0.000% (0.000s -> 0.000s)
2024-10-31 23:36:12,261 - deployment.py[187] - INFO: block block-0 (sparsity 0.2) latency rel drop: -5.201% (0.000s -> 0.000s)
2024-10-31 23:36:12,391 - deployment.py[187] - INFO: block block-0 (sparsity 0.4) latency rel drop: 6.108% (0.000s -> 0.000s)
2024-10-31 23:36:12,527 - deployment.py[187] - INFO: block block-0 (sparsity 0.6) latency rel drop: -39.680% (0.000s -> 0.001s)
2024-10-31 23:36:12,649 - deployment.py[187] - INFO: block block-0 (sparsity 0.8) latency rel drop: 1.999% (0.000s -> 0.000s)
2024-10-31 23:36:12,928 - deployment.py[187] - INFO: block block-1 (sparsity 0.0) latency rel drop: 0.000% (0.000s -> 0.000s)
2024-10-31 23:36:13,064 - deployment.py[187] - INFO: block block-1 (sparsity 0.2) latency rel drop: -0.986% (0.000s -> 0.000s)
2024-10-31 23:36:13,213 - deployment.py[187] - INFO: block block-1 (sparsity 0.4) latency rel drop: -11.833% (0.000s -> 0.001s)
2024-10-31 23:36:13,348 - deployment.py[187] - INFO: block block-1 (sparsity 0.6) latency rel drop: 21.648% (0.000s -> 0.000s)
2024-10-31 23:36:13,479 - deployment.py[187] - INFO: block block-1 (sparsity 0.8) latency rel drop: -3.040% (0.000s -> 0.001s)
2024-10-31 23:36:14,047 - deployment.py[187] - INFO: block block-2 (sparsity 0.0) latency rel drop: 0.000% (0.001s -> 0.001s)
2024-10-31 23:36:14,232 - deployment.py[187] - INFO: block block-2 (sparsity 0.2) latency rel drop: 30.602% (0.001s -> 0.001s)
2024-10-31 23:36:14,346 - deployment.py[187] - INFO: block block-2 (sparsity 0.4) latency rel drop: 52.213% (0.001s -> 0.000s)
2024-10-31 23:36:14,442 - deployment.py[187] - INFO: block block-2 (sparsity 0.6) latency rel drop: 69.760% (0.001s -> 0.000s)
2024-10-31 23:36:14,517 - deployment.py[187] - INFO: block block-2 (sparsity 0.8) latency rel drop: 72.899% (0.001s -> 0.000s)
2024-10-31 23:36:15,069 - deployment.py[187] - INFO: block block-3 (sparsity 0.0) latency rel drop: 0.000% (0.001s -> 0.001s)
2024-10-31 23:36:15,293 - deployment.py[187] - INFO: block block-3 (sparsity 0.2) latency rel drop: 11.857% (0.001s -> 0.001s)
2024-10-31 23:36:15,411 - deployment.py[187] - INFO: block block-3 (sparsity 0.4) latency rel drop: 43.584% (0.001s -> 0.001s)
2024-10-31 23:36:15,537 - deployment.py[187] - INFO: block block-3 (sparsity 0.6) latency rel drop: 47.368% (0.001s -> 0.001s)
2024-10-31 23:36:15,653 - deployment.py[187] - INFO: block block-3 (sparsity 0.8) latency rel drop: 63.686% (0.001s -> 0.000s)
2024-10-31 23:36:15,849 - deployment.py[187] - INFO: block block-4 (sparsity 0.0) latency rel drop: 0.000% (0.000s -> 0.000s)
2024-10-31 23:36:16,108 - deployment.py[187] - INFO: block block-4 (sparsity 0.2) latency rel drop: -156.870% (0.000s -> 0.001s)
2024-10-31 23:36:16,306 - deployment.py[187] - INFO: block block-4 (sparsity 0.4) latency rel drop: -107.851% (0.000s -> 0.001s)
2024-10-31 23:36:16,437 - deployment.py[187] - INFO: block block-4 (sparsity 0.6) latency rel drop: -26.556% (0.000s -> 0.000s)
2024-10-31 23:36:16,522 - deployment.py[187] - INFO: block block-4 (sparsity 0.8) latency rel drop: -6.820% (0.000s -> 0.000s)
2024-10-31 23:36:16,805 - deployment.py[187] - INFO: block block-5 (sparsity 0.0) latency rel drop: 0.000% (0.000s -> 0.000s)
2024-10-31 23:36:16,931 - deployment.py[187] - INFO: block block-5 (sparsity 0.2) latency rel drop: -2.977% (0.000s -> 0.000s)
2024-10-31 23:36:17,059 - deployment.py[187] - INFO: block block-5 (sparsity 0.4) latency rel drop: -8.011% (0.000s -> 0.000s)
2024-10-31 23:36:17,187 - deployment.py[187] - INFO: block block-5 (sparsity 0.6) latency rel drop: 23.451% (0.000s -> 0.000s)
2024-10-31 23:36:17,294 - deployment.py[187] - INFO: block block-5 (sparsity 0.8) latency rel drop: 11.283% (0.000s -> 0.000s)
2024-10-31 23:36:17,511 - deployment.py[187] - INFO: block block-6 (sparsity 0.0) latency rel drop: 0.000% (0.000s -> 0.000s)
2024-10-31 23:36:17,630 - deployment.py[187] - INFO: block block-6 (sparsity 0.2) latency rel drop: 6.527% (0.000s -> 0.000s)
2024-10-31 23:36:17,723 - deployment.py[187] - INFO: block block-6 (sparsity 0.4) latency rel drop: 36.282% (0.000s -> 0.000s)
2024-10-31 23:36:17,815 - deployment.py[187] - INFO: block block-6 (sparsity 0.6) latency rel drop: 36.460% (0.000s -> 0.000s)
2024-10-31 23:36:17,905 - deployment.py[187] - INFO: block block-6 (sparsity 0.8) latency rel drop: 27.296% (0.000s -> 0.000s)
2024-10-31 23:36:18,186 - deployment.py[187] - INFO: block block-7 (sparsity 0.0) latency rel drop: 0.000% (0.001s -> 0.001s)
2024-10-31 23:36:18,339 - deployment.py[187] - INFO: block block-7 (sparsity 0.2) latency rel drop: -5.441% (0.001s -> 0.001s)
2024-10-31 23:36:18,472 - deployment.py[187] - INFO: block block-7 (sparsity 0.4) latency rel drop: 28.610% (0.001s -> 0.000s)
2024-10-31 23:36:18,598 - deployment.py[187] - INFO: block block-7 (sparsity 0.6) latency rel drop: 40.688% (0.001s -> 0.000s)
2024-10-31 23:36:18,722 - deployment.py[187] - INFO: block block-7 (sparsity 0.8) latency rel drop: 40.656% (0.001s -> 0.000s)
